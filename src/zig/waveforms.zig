pub var SineWave = [32]u4{
    8,  9,  10, 12, 13, 14, 14, 15,
    15, 15, 14, 14, 13, 12, 10, 9,
    7,  6,  5,  3,  2,  1,  1,  0,
    0,  0,  1,  1,  2,  3,  5,  6,
};

pub var SilentWave = [32]u4{
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
};

pub var SawWave = [32]u4{
    0, 1, 2,  3,  4,  5,  6,  7,
    8, 9, 10, 11, 12, 13, 14, 15,
    0, 1, 2,  3,  4,  5,  6,  7,
    8, 9, 10, 11, 12, 13, 14, 15,
};

pub var SquareWave = [32]u4{
    15, 15, 15, 15, 15, 15, 15, 15,
    0,  0,  0,  0,  0,  0,  0,  0,
    15, 15, 15, 15, 15, 15, 15, 15,
    0,  0,  0,  0,  0,  0,  0,  0,
};

pub var TriangleWave = [32]u4{
    0,  1,  2,  3,  4,  5,  6,  7,
    8,  9,  10, 11, 12, 13, 14, 15,
    15, 14, 13, 12, 11, 10, 9,  8,
    7,  6,  5,  4,  3,  2,  1,  0,
};

var Wave5 = [32]u4{
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
};

var Wave6 = [32]u4{
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
};

var Wave7 = [32]u4{
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
};

var Wave8 = [32]u4{
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
};

var Wave9 = [32]u4{
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
};

var Wave10 = [32]u4{
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
};

var Wave11 = [32]u4{
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
};

var Wave12 = [32]u4{
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
};

var Wave13 = [32]u4{
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
};

var Wave14 = [32]u4{
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
};

var Wave15 = [32]u4{
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
};

var Wave16 = [32]u4{
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
};

pub var WaveBank = [16]*[32]u4{
    &SineWave,
    &SawWave,
    &SquareWave,
    &TriangleWave,

    &Wave5,
    &Wave6,
    &Wave7,
    &Wave8,

    &Wave9,
    &Wave10,
    &Wave11,
    &Wave12,

    &Wave13,
    &Wave14,
    &Wave15,
    &Wave16,
};

/// get a waveform at index for modification
export fn getWaveform(wave_index: u32) ?[*]u4 {
    if (wave_index < WaveBank.len) {
        return WaveBank[wave_index];
    }
    return null;
}

// test "generate waveforms" {
//     const pi = 3.14159265358979323846264338327950288419716939937510;
//     const std = @import("std");

//     // sine
//     var SineWave_: [32]u4 = undefined;

//     for (SineWave_[0..SineWave_.len]) |*val, pos| {
//         const r = @round(@sin(@intToFloat(f32, pos % SineWave_.len) / @intToFloat(f32, SineWave_.len) * 2 * pi) * 7.5 + 7.5);
//         val.* = @floatToInt(u4, r);
//         std.debug.print("{d}, ", .{val.*});
//     }
// }
